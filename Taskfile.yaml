version: '3'

env:
  SHELL: /bin/bash
  PLATFORMS:
    sh: if [ -z "{{.PLATFORMS}}" ]; then echo "linux/amd64,linux/arm64"; else echo "{{.PLATFORMS}}"; fi
  IMG_RESULT: ""
  VERSION:
    sh: git describe --tags || echo "v0.0.1"
  SHA:
    sh: git rev-parse HEAD
  TAG:
    sh: if [ -z "{{.TAG}}" ]; then echo "{{.SHA}}"; else echo "{{.TAG}}"; fi
  APPLICATION_NAME: "example"
  IMAGE_REPO: "xunholy"
  DOCKER_IMAGE:
    sh: echo "{{.IMAGE_REPO}}/{{.APPLICATION_NAME}}:{{.TAG}}"
  DBUILD_ARGS:
    sh: echo "--build-arg VERSION={{.VERSION}} --build-arg SHA={{.SHA}}"

tasks:
  setup:
    cmds:
      - if [ {{.IMG_RESULT}} = "load" ]; then export PUSH_ARG="--load"; export PLATFORMS="local"; elif [ {{.IMG_RESULT}} = "cache" ]; then : ; else export PUSH_ARG="--push"; fi

  docker_buildx:
    deps: [setup]
    cmds:
      - echo "{{.DOCKER_IMAGE}}"
      - export DOCKER_CLI_EXPERIMENTAL=enabled
      - |
        if ! docker buildx ls | grep -q container-builder; then
          docker buildx create --platform {{.PLATFORMS}} --name container-builder --use;
        fi
      - docker buildx build --platform {{.PLATFORMS}} -t "{{.DOCKER_IMAGE}}" {{.DBUILD_ARGS}} -f Dockerfile . {{.PUSH_ARG}}
      - echo "--> Build Docker Image: {{.DOCKER_IMAGE}}

  # local_build:
  #   cmds:
  #     - echo "--> Building Application Binary"
  #     - go build -a -installsuffix cgo -ldflags="-w -extldflags '-static' -X 'main.ApplicationName=${APPLICATION_NAME}' -X 'main.Version=${VERSION}' -X 'main.SHA=${SHA}'" -o ${APPLICATION_NAME} .
  #     - echo "--> Binary Available Locally: ${APPLICATION_NAME}"

  # local_run:
  #   cmds:
  #     - echo "--> Running Application ${APPLICATION_NAME} Locally"
  #     - go run main.go

  info:
    cmds:
      - echo ::set-output name=version::{{.VERSION}}
      - echo ::set-output name=tag::{{.TAG}}
